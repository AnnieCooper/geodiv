newi <- round(seq(1, length(x), 1000))[i]
new_pixlist[[i]] <- seq(newi, (newi - 1) + 1000, 1)
i <- i + 1
}
new_pixlist
segment
length(x) / 100
length(x) / 1000
pixlist <- seq(1, length(x), 1)
segment <- ceiling(length(x) / 1000)
new_pixlist <- vector('list', segment)
i <- 1
while(i <= segment) {
newi <- ceiling(seq(1, length(x), 1000))[i]
if (i < segment) {
new_pixlist[[i]] <- seq(newi, (newi - 1) + 1000, 1)
} else {
new_pixlist[[i]] <- seq(newi, length(x), 1)
}
i <- i + 1
}
new_pixlist
gc()
stopCluster(cl)
library(doSNOW)
?doSNOW
??doSNOW
?registerDoSNOW
?clusterExport
doSNOW::stopCluster(cl)
snow::stopCluster(cl)
# make and start cluster
try(snow::stopCluster(cl), silent = TRUE)
cl <- doSNOW::makeCluster(ncores)
cl <- snow::makeCluster(ncores)
x = crop(x, extent(-123, -122.98, 43.08, 43.1))
data(normforest)
x = normforest
x = crop(x, extent(-123, -122.98, 43.08, 43.1))
plot(x)
window_type = 'square'
size = 11
epsg_proj = 5070
metric = 'sk'
ncores = 3
# data frame of x, y locations
coords <- data.frame(xyFromCell(x, 1:ncell(x)))
# get list of # total pixels, break up into smaller lists
pixlist <- seq(1, length(x), 1)
segment <- ceiling(length(x) / 1000)
new_pixlist <- vector('list', segment)
i <- 1
while(i <= segment) {
newi <- ceiling(seq(1, length(x), 1000))[i]
if (i < segment) {
new_pixlist[[i]] <- seq(newi, (newi - 1) + 1000, 1)
} else {
new_pixlist[[i]] <- seq(newi, length(x), 1)
}
i <- i + 1
}
# output raster
out <- x
all_results <- c()
i = 1
try(snow::stopCluster(cl), silent = TRUE)
cl <- snow::makeCluster(ncores)
doSNOW::registerDoSNOW(cl)
snow::clusterExport(cl = cl, list = list('x', 'out', 'coords', 'size',
'window_type', 'epsg_proj',
'metric', 'threshold', 'low', 'high'))
invisible(snow::clusterEvalQ(cl, {
library(raster)
library(devtools)
library(sf)
devtools::load_all()}))
result <- snow::parLapply(cl, new_pixlist[[i]], function(i) {
pt_coords <- coords[i, ]
rownum <- rowFromCell(x, i)
colnum <- colFromCell(x, i)
if (window_type == 'square') {
outval <- window_metric(x, 'square', size, epsg_proj = epsg_proj, rownum, colnum, metric, threshold, low, high)
} else {
outval <- window_metric(x, 'circle', size, epsg_proj = epsg_proj, rownum, colnum, metric, threshold, low, high)
}
return(outval)
})
snow::stopCluster(cl)
threshold = NULL
low = NULL
high = NULL
try(snow::stopCluster(cl), silent = TRUE)
cl <- snow::makeCluster(ncores)
doSNOW::registerDoSNOW(cl)
snow::clusterExport(cl = cl, list = list('x', 'out', 'coords', 'size',
'window_type', 'epsg_proj',
'metric', 'threshold', 'low', 'high'))
invisible(snow::clusterEvalQ(cl, {
library(raster)
library(devtools)
library(sf)
devtools::load_all()}))
result <- snow::parLapply(cl, new_pixlist[[i]], function(i) {
pt_coords <- coords[i, ]
rownum <- rowFromCell(x, i)
colnum <- colFromCell(x, i)
if (window_type == 'square') {
outval <- window_metric(x, 'square', size, epsg_proj = epsg_proj, rownum, colnum, metric, threshold, low, high)
} else {
outval <- window_metric(x, 'circle', size, epsg_proj = epsg_proj, rownum, colnum, metric, threshold, low, high)
}
return(outval)
})
snow::stopCluster(cl)
devtools::load_all()
gc()
data(normforest)
x = normforest
x = crop(x, extent(-123, -122.98, 43.08, 43.1))
gc()
window_type = 'square'
size = 11
epsg_proj = 5070
metric = 'sk'
threshold = NULL
low = NULL
high = NULL
coords <- data.frame(xyFromCell(x, 1:ncell(x)))
# get list of # total pixels, break up into smaller lists
pixlist <- seq(1, length(x), 1)
segment <- ceiling(length(x) / 1000)
new_pixlist <- vector('list', segment)
i <- 1
while(i <= segment) {
newi <- ceiling(seq(1, length(x), 1000))[i]
if (i < segment) {
new_pixlist[[i]] <- seq(newi, (newi - 1) + 1000, 1)
} else {
new_pixlist[[i]] <- seq(newi, length(x), 1)
}
i <- i + 1
}
# output raster
out <- x
i = 1
for (i in new_pixlist[[1]]) {
cat('Pixel #: ', i, '\n')
pt_coords <- coords[i, ]
rownum <- rowFromCell(x, i)
colnum <- colFromCell(x, i)
if (window_type == 'square') {
out[rownum, colnum] <- window_metric(x, 'square', size, epsg_proj = epsg_proj, rownum, colnum, metric, threshold, low, high)
} else {
out[rownum, colnum] <- window_metric(x, 'circle', size, epsg_proj = epsg_proj, rownum, colnum, metric, threshold, low, high)
}
}
warnings()
seg_length <- length(x) / ncores
ncores = 3
seg_length <- length(x) / ncores
seg_length
seg_length <- round(length(x) / ncores)
segment <- ceiling(length(x) / seg_length)
seg_length <- ceiling(length(x) / ncores)
seg_length
segment <- ceiling(length(x) / seg_length)
segment
pixlist <- seq(1, length(x), 1)
seg_length <- ceiling(length(x) / ncores)
segment <- ceiling(length(x) / seg_length)
new_pixlist <- vector('list', segment)
i <- 1
while(i <= segment) {
newi <- ceiling(seq(1, length(x), seg_length))[i]
if (i < segment) {
new_pixlist[[i]] <- seq(newi, (newi - 1) + seg_length, 1)
} else {
new_pixlist[[i]] <- seq(newi, length(x), 1)
}
i <- i + 1
}
new_pixlist
new_pixlist[[1]] <- seq(1,50,1)
new_pixlist[[2]] <- seq(51,100,1)
new_pixlist[[3]] <- seq(101, 150, 1)
new_pixlist
# make and start cluster
try(snow::stopCluster(cl), silent = TRUE)
cl <- snow::makeCluster(ncores)
doSNOW::registerDoSNOW(cl)
snow::clusterExport(cl = cl, list = list('x', 'out', 'coords', 'size',
'window_type', 'epsg_proj',
'metric', 'threshold', 'low', 'high'))
invisible(snow::clusterEvalQ(cl, {
library(raster)
library(devtools)
library(sf)
devtools::load_all()}))
# for each list in new_pixlist, run a for loop over all values
result <- snow::parLapply(cl, new_pixlist, function(inds) {
outvals <- c()
for (i in inds) {
pt_coords <- coords[i, ]
rownum <- rowFromCell(x, i)
colnum <- colFromCell(x, i)
if (window_type == 'square') {
outval <- window_metric(x, 'square', size, epsg_proj = epsg_proj, rownum, colnum, metric, threshold, low, high)
} else {
outval <- window_metric(x, 'circle', size, epsg_proj = epsg_proj, rownum, colnum, metric, threshold, low, high)
}
outval <- c(outvals, outval)
}
return(outvals)
})
snow::stopCluster(cl)
result
try(snow::stopCluster(cl), silent = TRUE)
cl <- snow::makeCluster(ncores)
doSNOW::registerDoSNOW(cl)
snow::clusterExport(cl = cl, list = list('x', 'out', 'coords', 'size',
'window_type', 'epsg_proj',
'metric', 'threshold', 'low', 'high'))
invisible(snow::clusterEvalQ(cl, {
library(raster)
library(devtools)
library(sf)
devtools::load_all()}))
# for each list in new_pixlist, run a for loop over all values
result <- snow::parLapply(cl, new_pixlist, function(inds) {
outvals <- c()
for (i in inds) {
pt_coords <- coords[i, ]
rownum <- rowFromCell(x, i)
colnum <- colFromCell(x, i)
if (window_type == 'square') {
outval <- window_metric(x, 'square', size, epsg_proj = epsg_proj, rownum, colnum, metric, threshold, low, high)
} else {
outval <- window_metric(x, 'circle', size, epsg_proj = epsg_proj, rownum, colnum, metric, threshold, low, high)
}
outvals <- c(outvals, outval)
}
return(outvals)
})
snow::stopCluster(cl)
result
View(x)
x
x = crop(x, extent(-123, -122.99, 43.09, 43.1))
plot(x)
x
test = texture_image(x, 'square', 11, 5070, 'sk')
# make and start cluster
try(snow::stopCluster(cl), silent = TRUE)
snow::stopCluster(cl)
devtools::load_all()
devtools::check()
install.packages('Rcpp')
devtools::use_rcpp()
int rowmax = 1;
getwd()
library(Rcpp)
sourceCpp('/home/annie/Documents/SyntheticLandscape/surface_metrics/geodiv/src/RcppExports.cpp')
library(devtools)
devtools::install_github('bioXgeo/geodiv')
library(geodiv)
edit(stxr)
devtools::install_github('bioXgeo/geodiv', force = TRUE)
library(geodiv)
edit(stxr)
?stxr
edit(sa)
install.packages(c("doParallel", "ggplot2", "git2r", "knitr", "landscapemetrics", "magick", "R.utils", "testthat", "tidyr", "usethis"))
devtools::install_github('bioXgeo/geodiv', force = TRUE)
library(geodiv)
edit(sa)
edit(stxr)
library(devtools)
devtools::install_github('bioXgeo/geodiv', force = TRUE)
library(geodiv)
edit(stxr)
edit(sdq)
exists('stxr')
exists('sa')
exists('scl')
exists('aacf')
devtools::check()
install_github('bioXgeo/geodiv')
library(geodiv)
edit(stxr)
devtools::build()
devtools::check()
library(geodiv)
data(normforest)
out = texture_image(normforest, 'square', 5, in_meters = FALSE, 'sa', NULL, parallel = TRUE, 3, 6)
out = texture_image(normforest, 'square', 5, in_meters = FALSE, 5070, 'sa', NULL, parallel = TRUE, 3, 6)
plot(out)
plot(normforest)
out2 = texture_image(normforest, 'square', 5, in_meters = FALSE, 5070, 'sfd', NULL, parallel = TRUE, 3, 6)
plot(out2)
data(orelevation)
plot(orelevation)
out2 = texture_image(orelevation, 'square', 5, in_meters = FALSE, 5070, 'sfd', NULL, parallel = TRUE, 3, 6)
plot(out2)
R CMD check
system('R CMD check')
?check
devtools::load_all()
data(normforest)
sfd(normforest)
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::use_readme_rmd()
?Sa
?as
?sa
?svk
devtools::load_all()
?sp
?ssc
devtools::load_all()
devtools::check()
library(devtools)
devtools::load_all()
devtools::check()
citation(rgdal)
citation('rgdal')
devtools::check()
devtools::use_readme_rmd()
devtools::release()
install.packages('callr')
install.packages("callr")
install.packages("roxygen2")
install.packages("scales")
install.packages("shiny")
devtools::document9)
devtools::document()
devtools::document()
library(devtools)
devtools::load_all()
data(normforest)
aacf(normforest)
?aacf
library(raster)
# import raster image
data(normforest)
# calculate aacf img and matrix
aacf_out <- aacf(normforest)
# plot resulting aacf image
plot(aacf_out)
library(devtools)
devtools::build_win()
devtools::win_build()
library(devtools)
library(devtools)
install.packages('devtools')
install.packages('rlang')
install.packages('rlang')
install.packages('devtools')
library(devtools)
devtools::load_all()
install.packages('dplyr')
install.packages('phonTools')
install.packages('pracma')
install.packages('raster')
install.packages('e1071')
install.packages('spatstat')
install.packages('rgeos')
install.packages('doSNOW')
devtools::load_all()
install.packages('rgdal')
install.packages('sf')
install.packages('zoo')
devtools::load_all()
devtools::check()
Sys.getenv()
find_rtools()
library(devtools)
devtools::check()
devtools::check_rhub()
data(normforest)
test = fftshift(fft(raster::as.matrix(normforest)), dim = -1)
test = fft(raster::as.matrix(normforest))
class(test)
devtools::check()
devtools::check()
devtools::check_rhub()
base::Re(1)
base::Re(stats::fft(raster::as.matrix(normforest)), dim = 8))
base::Re(stats::fft(raster::as.matrix(normforest)), dim = 8)
base::Re(stats::fft(raster::as.matrix(normforest))), dim = 8)
base::Re(stats::fft(raster::as.matrix(normforest)))
expect_error(fftshift(base::Re(stats::fft(raster::as.matrix(normforest))), dim = 8), 'invalid value for dim -- must be -1, 1, or 2.')
fftshift(base::Re(stats::fft(raster::as.matrix(normforest))), dim = 8)
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
gc()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
data(normforest)
aacf(normforest)
length(aacf(normforest))
dim(aacf(normforest))
dim(aacf(normforest))
devtools::check_rhub()
devtools::check_rhub()
?as.matrix
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::load_all()
devtools::check()
devtools::submit_cran()
devtools::submit_cran()
library(devtools)
devtools::load_all9)
devtools::load_all()
devtools::submit_cran()
library(parallel)
?clusterExport
?registerDoSNOW
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check_rhub()
devtools::submit_cran()
library(devtools)
devtools::load_all()
devtools::submit_cran()
library(devtools)
devtools::load_all()
data(normforest)
sfd(normforest)
?sfd
devtools::document()
?sfd
library(geodiv)
?sfd
devtools::check()
devtools::load_all()
devtools::check()
?sfd
sfd(normforest)
devtools::check_rhub()
devtools::check_rhub()
devtools::load_all()
devtools::submit_cran()
knitr::opts_chunk$set(echo = TRUE)
# The below line of code will need to be modified to match the directory on the user's machine that contains the vignette files if the texture_image function has not been run in completion during the user's current session.
sa_img <- raster('/home/annie/Documents/geodiv_data/sa_img_450m.tif')
sbi_img <- raster('/home/annie/Documents/geodiv_data/sbi_img_450m.tif')
std_img <- raster('/home/annie/Documents/geodiv_data/std_img_450m.tif')
library(raster)
# The below line of code will need to be modified to match the directory on the user's machine that contains the vignette files if the texture_image function has not been run in completion during the user's current session.
sa_img <- raster('/home/annie/Documents/geodiv_data/sa_img_450m.tif')
sbi_img <- raster('/home/annie/Documents/geodiv_data/sbi_img_450m.tif')
std_img <- raster('/home/annie/Documents/geodiv_data/std_img_450m.tif')
sfd_img <- raster('/home/annie/Documents/geodiv_data/sfd_img_450m.tif')
sa_img
data(orforest)
orforest
# reproject back to original
sa_reproj <- projectRaster(from = sa_img, to = orforest, method = 'bilinear')
library(devtools)
devtools::load_all()
devtools::check()
test = projectRaster(sa_img, sbi_img)
knitr::opts_chunk$set(echo = TRUE)
# The below line of code will need to be modified to match the directory on the user's machine that contains the vignette files if the texture_image function has not been run in completion during the user's current session.
sa_img <- raster('/home/annie/Documents/geodiv_data/sa_img_450m.tif')
std_img <- raster('/home/annie/Documents/geodiv_data/std_img_450m.tif')
sbi_img <- raster('/home/annie/Documents/geodiv_data/sbi_img_450m.tif')
std_img <- raster('/home/annie/Documents/geodiv_data/std_img_450m.tif')
sfd_img <- raster('/home/annie/Documents/geodiv_data/sfd_img_450m.tif')
test = projectRaster(sa_img, sbi_img)
data(orforest)
test = projectRaster(sa_img, orforest)
orforest
plot(orforest)
sa_img
test = orforest
test
test2 = projectRaster(test, sa_img)
install.packages('rgdal')
install.packages("rgdal")
library(devtools)
devtools::load_all()
devtools::check()
.Last.error.trace
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
install.packages('foreign')
