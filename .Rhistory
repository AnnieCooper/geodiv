}
i <- i + 1
}
new_pixlist
new_pixlist[[1]] <- seq(1,50,1)
new_pixlist[[2]] <- seq(51,100,1)
new_pixlist[[3]] <- seq(101, 150, 1)
new_pixlist
# make and start cluster
try(snow::stopCluster(cl), silent = TRUE)
cl <- snow::makeCluster(ncores)
doSNOW::registerDoSNOW(cl)
snow::clusterExport(cl = cl, list = list('x', 'out', 'coords', 'size',
'window_type', 'epsg_proj',
'metric', 'threshold', 'low', 'high'))
invisible(snow::clusterEvalQ(cl, {
library(raster)
library(devtools)
library(sf)
devtools::load_all()}))
# for each list in new_pixlist, run a for loop over all values
result <- snow::parLapply(cl, new_pixlist, function(inds) {
outvals <- c()
for (i in inds) {
pt_coords <- coords[i, ]
rownum <- rowFromCell(x, i)
colnum <- colFromCell(x, i)
if (window_type == 'square') {
outval <- window_metric(x, 'square', size, epsg_proj = epsg_proj, rownum, colnum, metric, threshold, low, high)
} else {
outval <- window_metric(x, 'circle', size, epsg_proj = epsg_proj, rownum, colnum, metric, threshold, low, high)
}
outval <- c(outvals, outval)
}
return(outvals)
})
snow::stopCluster(cl)
result
try(snow::stopCluster(cl), silent = TRUE)
cl <- snow::makeCluster(ncores)
doSNOW::registerDoSNOW(cl)
snow::clusterExport(cl = cl, list = list('x', 'out', 'coords', 'size',
'window_type', 'epsg_proj',
'metric', 'threshold', 'low', 'high'))
invisible(snow::clusterEvalQ(cl, {
library(raster)
library(devtools)
library(sf)
devtools::load_all()}))
# for each list in new_pixlist, run a for loop over all values
result <- snow::parLapply(cl, new_pixlist, function(inds) {
outvals <- c()
for (i in inds) {
pt_coords <- coords[i, ]
rownum <- rowFromCell(x, i)
colnum <- colFromCell(x, i)
if (window_type == 'square') {
outval <- window_metric(x, 'square', size, epsg_proj = epsg_proj, rownum, colnum, metric, threshold, low, high)
} else {
outval <- window_metric(x, 'circle', size, epsg_proj = epsg_proj, rownum, colnum, metric, threshold, low, high)
}
outvals <- c(outvals, outval)
}
return(outvals)
})
snow::stopCluster(cl)
result
View(x)
x
x = crop(x, extent(-123, -122.99, 43.09, 43.1))
plot(x)
x
test = texture_image(x, 'square', 11, 5070, 'sk')
# make and start cluster
try(snow::stopCluster(cl), silent = TRUE)
snow::stopCluster(cl)
devtools::load_all()
devtools::check()
install.packages('Rcpp')
devtools::use_rcpp()
int rowmax = 1;
getwd()
library(Rcpp)
sourceCpp('/home/annie/Documents/SyntheticLandscape/surface_metrics/geodiv/src/RcppExports.cpp')
library(devtools)
devtools::install_github('bioXgeo/geodiv')
library(geodiv)
edit(stxr)
devtools::install_github('bioXgeo/geodiv', force = TRUE)
library(geodiv)
edit(stxr)
?stxr
edit(sa)
install.packages(c("doParallel", "ggplot2", "git2r", "knitr", "landscapemetrics", "magick", "R.utils", "testthat", "tidyr", "usethis"))
devtools::install_github('bioXgeo/geodiv', force = TRUE)
library(geodiv)
edit(sa)
edit(stxr)
library(devtools)
devtools::install_github('bioXgeo/geodiv', force = TRUE)
library(geodiv)
edit(stxr)
edit(sdq)
exists('stxr')
exists('sa')
exists('scl')
exists('aacf')
devtools::check()
install_github('bioXgeo/geodiv')
library(geodiv)
edit(stxr)
devtools::build()
devtools::check()
library(geodiv)
data(normforest)
out = texture_image(normforest, 'square', 5, in_meters = FALSE, 'sa', NULL, parallel = TRUE, 3, 6)
out = texture_image(normforest, 'square', 5, in_meters = FALSE, 5070, 'sa', NULL, parallel = TRUE, 3, 6)
plot(out)
plot(normforest)
out2 = texture_image(normforest, 'square', 5, in_meters = FALSE, 5070, 'sfd', NULL, parallel = TRUE, 3, 6)
plot(out2)
data(orelevation)
plot(orelevation)
out2 = texture_image(orelevation, 'square', 5, in_meters = FALSE, 5070, 'sfd', NULL, parallel = TRUE, 3, 6)
plot(out2)
R CMD check
system('R CMD check')
?check
devtools::load_all()
data(normforest)
sfd(normforest)
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::use_readme_rmd()
?Sa
?as
?sa
?svk
devtools::load_all()
?sp
?ssc
devtools::load_all()
devtools::check()
library(devtools)
devtools::load_all()
devtools::check()
citation(rgdal)
citation('rgdal')
devtools::check()
devtools::use_readme_rmd()
devtools::release()
install.packages('callr')
install.packages("callr")
install.packages("roxygen2")
install.packages("scales")
install.packages("shiny")
devtools::document9)
devtools::document()
devtools::document()
library(devtools)
devtools::load_all()
data(normforest)
aacf(normforest)
?aacf
library(raster)
# import raster image
data(normforest)
# calculate aacf img and matrix
aacf_out <- aacf(normforest)
# plot resulting aacf image
plot(aacf_out)
library(devtools)
devtools::build_win()
devtools::win_build()
library(devtools)
library(devtools)
install.packages('devtools')
install.packages('rlang')
install.packages('rlang')
install.packages('devtools')
library(devtools)
devtools::load_all()
install.packages('dplyr')
install.packages('phonTools')
install.packages('pracma')
install.packages('raster')
install.packages('e1071')
install.packages('spatstat')
install.packages('rgeos')
install.packages('doSNOW')
devtools::load_all()
install.packages('rgdal')
install.packages('sf')
install.packages('zoo')
devtools::load_all()
devtools::check()
Sys.getenv()
find_rtools()
library(devtools)
devtools::check()
devtools::check_rhub()
data(normforest)
test = fftshift(fft(raster::as.matrix(normforest)), dim = -1)
test = fft(raster::as.matrix(normforest))
class(test)
devtools::check()
devtools::check()
devtools::check_rhub()
base::Re(1)
base::Re(stats::fft(raster::as.matrix(normforest)), dim = 8))
base::Re(stats::fft(raster::as.matrix(normforest)), dim = 8)
base::Re(stats::fft(raster::as.matrix(normforest))), dim = 8)
base::Re(stats::fft(raster::as.matrix(normforest)))
expect_error(fftshift(base::Re(stats::fft(raster::as.matrix(normforest))), dim = 8), 'invalid value for dim -- must be -1, 1, or 2.')
fftshift(base::Re(stats::fft(raster::as.matrix(normforest))), dim = 8)
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
gc()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
data(normforest)
aacf(normforest)
length(aacf(normforest))
dim(aacf(normforest))
dim(aacf(normforest))
devtools::check_rhub()
devtools::check_rhub()
?as.matrix
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::load_all()
devtools::check()
devtools::submit_cran()
devtools::submit_cran()
library(devtools)
devtools::load_all9)
devtools::load_all()
devtools::submit_cran()
library(parallel)
?clusterExport
?registerDoSNOW
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check_rhub()
devtools::submit_cran()
library(devtools)
devtools::load_all()
devtools::submit_cran()
library(devtools)
devtools::load_all()
data(normforest)
sfd(normforest)
?sfd
devtools::document()
?sfd
library(geodiv)
?sfd
devtools::check()
devtools::load_all()
devtools::check()
?sfd
sfd(normforest)
devtools::check_rhub()
devtools::check_rhub()
devtools::load_all()
devtools::submit_cran()
knitr::opts_chunk$set(echo = TRUE)
# The below line of code will need to be modified to match the directory on the user's machine that contains the vignette files if the texture_image function has not been run in completion during the user's current session.
sa_img <- raster('/home/annie/Documents/geodiv_data/sa_img_450m.tif')
sbi_img <- raster('/home/annie/Documents/geodiv_data/sbi_img_450m.tif')
std_img <- raster('/home/annie/Documents/geodiv_data/std_img_450m.tif')
library(raster)
# The below line of code will need to be modified to match the directory on the user's machine that contains the vignette files if the texture_image function has not been run in completion during the user's current session.
sa_img <- raster('/home/annie/Documents/geodiv_data/sa_img_450m.tif')
sbi_img <- raster('/home/annie/Documents/geodiv_data/sbi_img_450m.tif')
std_img <- raster('/home/annie/Documents/geodiv_data/std_img_450m.tif')
sfd_img <- raster('/home/annie/Documents/geodiv_data/sfd_img_450m.tif')
sa_img
data(orforest)
orforest
# reproject back to original
sa_reproj <- projectRaster(from = sa_img, to = orforest, method = 'bilinear')
library(devtools)
devtools::load_all()
devtools::check()
test = projectRaster(sa_img, sbi_img)
knitr::opts_chunk$set(echo = TRUE)
# The below line of code will need to be modified to match the directory on the user's machine that contains the vignette files if the texture_image function has not been run in completion during the user's current session.
sa_img <- raster('/home/annie/Documents/geodiv_data/sa_img_450m.tif')
std_img <- raster('/home/annie/Documents/geodiv_data/std_img_450m.tif')
sbi_img <- raster('/home/annie/Documents/geodiv_data/sbi_img_450m.tif')
std_img <- raster('/home/annie/Documents/geodiv_data/std_img_450m.tif')
sfd_img <- raster('/home/annie/Documents/geodiv_data/sfd_img_450m.tif')
test = projectRaster(sa_img, sbi_img)
data(orforest)
test = projectRaster(sa_img, orforest)
orforest
plot(orforest)
sa_img
test = orforest
test
test2 = projectRaster(test, sa_img)
install.packages('rgdal')
install.packages("rgdal")
library(devtools)
devtools::load_all()
devtools::check()
.Last.error.trace
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
install.packages('foreign')
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages('devtools')
devtools::load_all()
.Last.error.trace
install.packages(c('dplyr', 'phonTools', 'pracma', 'raster'))
install.packages('rgdal')
install.packages(c('e1071', 'sp', 'rgeos','sf', 'zoo', 'RcppArmadillo'))
devtools::load_all()
devtools::check()
install.packages('rasterVis')
devtools::load_all()
devtools::check()
install.packages('maptools')
devtools::load_all()
devtools::check()
install.packages('mapdata')
devtools::load_all()
devtools::check()
install.packages('ggplot2')
devtools::load_all()
devtools::check()
install.packages('tidyverse')
devtools::load_all()
devtools::check()
install.packages('ggmap')
devtools::load_all()
devtools::check()
install.packages('corrplot')
install.packages('cowplot')
devtools::load_all()
devtools::check()
install.packages('gridExtra')
devtools::load_all()
devtools::check()
install.packages('factoextra')
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
library(rgdal)
install.packages('rgdal')
install.packages("rgdal")
library(rgdal)
sf_extSoftVersion()
sf::sf_extSoftVersion()
library(sf)
devtools::load_all()
sf::sf_extSoftVersion()
devtools::check()
install.packages('plotKML')
library(raster)
knitr::opts_chunk$set(echo = TRUE)
# The below line of code will need to be modified to match the directory on the user's machine that contains the vignette files if the texture_image function has not been run in completion during the user's current session.
sa_img <- raster('sa_img_450m.tif')
data(orforest)
test = projectRaster(sa_img, orforest)
library(plotKML)
install.packages('PROJ')
install.packages('PROJ')
library(PROJ)
library(libproj)
test = projectRaster(sa_img, orforest)
install.packages('raster')
install.packages("raster")
install.packages("raster")
install.packages("raster")
install.packages('raster')
install.packages("raster")
install.packages("raster")
install.packages('raster')
install.packages("raster")
install.packages('sf')
install.packages('rgdal')
sa_img <- raster('sa_img_450m.tif')
library(raster)
sa_img <- raster('sa_img_450m.tif')
library(devtools)
devtools::load_all()
sa_img <- raster('sa_img_450m.tif')
getwd()
raster('./vignettes/sa_img_450m.tif')
data(orforest)
sa_img = raster('./vignettes/sa_img_450m.tif')
test = projectRaster(sa_img, orforest)
sf::sf_extSoftVersion()
Sys.getenv()
test = raster('L:/sect_science/data/20y_plan/planning_areas/Methow_Twisp/LE_202005/6_MoistureStress_Climate/AET_1981_2010.tif')
test2 = projectRaster(test, orforest, method = 'bilinear')
test2 = projectRaster(test, sa_img, method = 'bilinear')
test2
test = raster('L:/sect_science/data/20y_plan/planning_areas/Methow_Twisp/LE_202005/6_MoistureStress_Climate/AET_1981_2010.tif')
test2 = projectRaster(test, sa_img, method = 'bilinear')
test2
test
sa_img
sa_img = as(sa_img, 'sf')
library(Sf)
library(sf)
sa_img = as(sa_img, 'sf')
?as
sa_img = sf(sa_img)
?sf
sa_img = st_sf(sa_img)
sa_img = st_read('./vignettes/sa_img_450m.tif')
st_crs(sa_img)
crs(sa_img) = CRS(SRS_string='EPSG:42303')
crs(sa_img) = CRS('+init=epsg:42303')
test = CRS(crs(sa_img))
crs(sa_img)
crs(sa_img)[1]
crs(sa_img)[[1]]
crs(sa_img)
proj4string(sa_img)
test = CRS(proj4string(sa_img))
cat(strwrap(gsub(",", ", ", (comment(test)))), sep="\n")
test <- rgdal::new_proj_and_gdal()
test
crs(sa_img2) = crs("+init=epsg:42303")
epsg(42303)
?st_crs
st_crs('EPSG:42303')
st_crs("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs no_defs")
crs(sa_img) = st_crs("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs no_defs")
st_crs("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs no_defs")$CRS
st_crs("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs no_defs")$crs
st_crs("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs no_defs")$epsg
st_crs(sa_img) = st_crs("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs no_defs")$epsg
st_crs(sa_img) = st_crs("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs no_defs")
test_crs = st_crs("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs no_defs")
CRS(test_crs)
orforest
crs(test_crs) = CRS("+init=epsg:4326")
crs(orforest) = CRS("+init=epsg:4326")
orforest
test = projectRaster(sa_img, orforest)
plot(test)
plot(orforest)
?use_data
devtools::use_data(orforest)
devtools::use_data(orforest)
usethis::use_data(orforest)
usethis::use_data(orforest, overwrite = TRUE)
data(normforest)
normforest
crs(normforest) = CRS("+init=epsg:4326")
normforest
usethis::use_data(normforest, overwrite = TRUE)
data(orelevation)
orelevation
crs(orelevation) = CRS("+init=epsg:4326")
orelevation
plot(orelevation)
usethis::use_data(orelevation, overwrite = TRUE)
devtools::load_all()
data(orforest)
orforest
gc()
gc()
devtools::load_all()
devtools::check()
install.packages('qpdf')
library(devtools)
devtools::check_win_devel()
devtools::check()
devtools::release()
devtools::spell_check()
devtools::release()
library(devtools)
devtools::check()
library(devtools)
devtools::check()
library(devtools)
devtools::check()
getwd()
